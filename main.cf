bundle agent mpf_main
{
  methods:
    "packages_allowlist_snapshot:state";
    "packages_allowlist_snapshot:conclude";
}

body file control
{
  namespace => "packages_allowlist_snapshot";
}

bundle agent entry_point
{
  methods:
    "packages_allowlist_snapshot:state";
    "packages_allowlist_snapshot:conclude";
}

bundle agent state
{
  vars:
    "_filename"
      string => "$(sys.statedir)/packages-allowlist-snapshot.txt";

  classes:
    "snapshot_exists"
      if => fileexists("$(_filename)");
    "mode_found"
      if => isvariable("mode");
    "mode_missing"
      if => not(isvariable("mode"));
    "mode_init"
      if => and(isvariable("mode"), strcmp($(mode), "init"));
    "mode_warn"
      if => and(isvariable("mode"), strcmp($(mode), "warn"));
    "mode_enforce"
      if => and(isvariable("mode"), strcmp($(mode), "enforce"));
    "allow_list_enforcement_enabled"
      if => and(
        isvariable("mode"),
        strcmp($(mode), "enforce"),
        fileexists("$(_filename)"));

  vars:
    "installed_packages_data"
      data => packagesmatching(
        ".*",
        ".*",
        ".*",
        "$(default:package_module_knowledge.platform_default)");
    "installed_packages_names"
      slist => sort(
        getvalues(maparray(
          '$(installed_packages_data[$(this.k)][name])',
          installed_packages_data)),
        "lex");

  files:
    snapshot_exists.mode_init::
      "$(_filename)"
        create => "true",
        content => join(
          "$(const.n)",
          sort(getvalues("installed_packages_names"), "lex")),
        if => isvariable("installed_packages_names");

  vars:
    snapshot_exists::
      "allowed_packages_names"
        slist => sort(readstringlist("$(_filename)", "", "\n", inf, inf), "lex");
      "unwanted_packages_names"
        slist => sort(
          difference(
            getvalues(installed_packages_names),
            allowed_packages_names),
          "lex");

  packages:
    allow_list_enforcement_enabled::
      "$(unwanted_packages_names)"
        policy => "absent",
        action => default:policy("fix");
    mode_warn::
      "$(unwanted_packages_names)"
        policy => "absent",
        action => default:policy("warn");

  vars:
    mode_init::
      "_status"
        string => "Initializing - Generated snapshot of $(with) installed packages",
        with => length(installed_packages_names);
    mode_warn::
      "_status"
        string => "Warnings - Printing warnings about $(with) unwanted packages",
        with => length(unwanted_packages_names);
    mode_enforce::
      "_status"
        string => "Uninstalling - Uninstalling $(with) unwanted packages",
        with => length(unwanted_packages_names);
    mode_warn|mode_enforce::
      "_status"
        string => "Compliant - All installed packages found in allowed list",
        if => strcmp("0", length(unwanted_packages_names));
    mode_found::
      "_status"
        string => "Error - 0 allowed packages found",
        if => strcmp("0", length(allowed_packages_names));
    mode_found::
      "_status"
        string => "Error - 0 installed packages found",
        if => strcmp("0", length(installed_packages_names));
    mode_found.(mode_warn|mode_enforce).!snapshot_exists::
      "_status"
        string => "Error - No snapshot file found";
    mode_found.!(mode_warn|mode_init|mode_enforce)::
      "_status"
        string => "Error - Unknown mode '$(with)', should be 'warn', 'init', or 'enforce'",
        with => "$(mode)";
    mode_missing::
      "_status"
        string => "Deactivated - No mode specified";
    any::
      "_status"
        string => "Error - Unknown error",
        if => not(isvariable("_status"));
      "status"
        string => "$(_status)",
        meta => {"inventory", "attribute_name=Package enforcement status"};
}

bundle agent conclude
{
  vars:
    "unwanted_packages_arr[$(packages_allowlist_snapshot:state.unwanted_packages_names)]"
      string => "$(packages_allowlist_snapshot:state.unwanted_packages_names)",
      meta => {"inventory", "attribute_name=Unwanted packages"};
    "allowed_packages_arr[$(packages_allowlist_snapshot:state.allowed_packages_names)]"
      string => "$(packages_allowlist_snapshot:state.allowed_packages_names)",
      meta => {"inventory", "attribute_name=Allowed packages"};
    "unwanted_packages_arr"
      slist => {},
      if => strcmp(length(getindices(unwanted_packages_arr)), "0"),
      meta => {"inventory", "attribute_name=Unwanted packages"};
    "allowed_packages_arr"
      slist => {},
      if => strcmp(length(getindices(allowed_packages_arr)), "0"),
      meta => {"inventory", "attribute_name=Allowed packages"};

  classes:
    "_error_encountered"
      if => regcmp("Error.*", "$(state.status)");

  reports:
    default:DEBUG|default:debug|default:debug_packages_allowlist_snapshot|_error_encountered::
      "Installed packages found: $(with)"
        with => length("packages_allowlist_snapshot:state.installed_packages_names"),
        if => isvariable("packages_allowlist_snapshot:state.installed_packages_names");
      "Allowed packages found: $(with)"
        with => length("packages_allowlist_snapshot:state.allowed_packages_names"),
        if => isvariable("packages_allowlist_snapshot:state.allowed_packages_names");
      "Unwanted packages found: $(with)"
        with => length("packages_allowlist_snapshot:state.unwanted_packages_names"),
        if => isvariable("packages_allowlist_snapshot:state.unwanted_packages_names");
      "Unwanted package: $(packages_allowlist_snapshot:state.unwanted_packages_names)"
        if => isvariable("packages_allowlist_snapshot:state.unwanted_packages_names");
      "Package enforcement status: $(packages_allowlist_snapshot:state.status)"
        if => isvariable("packages_allowlist_snapshot:state.status");
}
